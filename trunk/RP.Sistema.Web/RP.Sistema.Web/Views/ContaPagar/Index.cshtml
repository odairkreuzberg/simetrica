@model RP.DataAccess.PaginatedList<RP.Sistema.Model.Entities.ContaPagar>
@using RP.Util;
@using RP.Util.Class;
@using RP.Util.Class.Grid;
@using RP.Sistema.Web.Helpers;
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var _action = ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString();
    string situacao = ViewBag.situacao;
    DateTime dtFim = ViewBag.dtFim ?? DateTime.Now;
    DateTime dtInicio = ViewBag.dtInicio ?? dtFim.AddDays(-10);
}
<div class="container-fluid">
    @Html.RenderFlashMessage()
    @using (Html.BeginForm("Search", "ContaPagar", FormMethod.Get, new { @class = "well form-inline" }))
    {
        <div class="container center">
            <div class="control-group">
                <span style="margin-left: 18px">Filtro</span>
                @Html.TextBox("filter", null, new { maxlength = "100", @placeholder = "Pesquisar por fornecedor...", style = "width:508px" })
                @Html.CustomActionLink("Adicionar", "Create", new { @class = "btn btn-success", @title = "Novo registro" }, new { @left = "icon-plus-sign icon-white" }, false)
            </div>

            <div class="control-group">
                <span>Período</span>
                @Html.TextBox("dtInicio", dtInicio, new { @class = "input-small datepicker", @mask = "99/99/9999" })
                @Html.TextBox("dtFim", dtFim, new { @class = "input-small datepicker", @mask = "99/99/9999" })
                <select name="situacao" id="situacao" class="input-large">
                    <option value="Aguardando pagamento" @((string.IsNullOrEmpty(situacao) || situacao == "Aguardando pagamento") ? "selected" : string.Empty)>Aguardando pagamento</option>
                    <option value="Pago"@((situacao == "Pago") ? "selected" : string.Empty)>Pago</option>
                    <option value="Todos"@((situacao == "Todos") ? "selected" : string.Empty)>Todos</option>
                </select>
                @Html.CustomButton("Localizar", "submit", new { @class = "btn" }, new { @left = "icon-search" }, false)
                <div class="btn-group">
                    <a class="btn btn-inverse dropdown-toggle" data-toggle="dropdown" href="#" title="Mais ações"><i class="icon-cog icon-white"></i>Ações <span class="caret"></span></a>
                    <ul class="dropdown-menu">
                        <li><a href="@Url.Action("Report", new { clear = true })" id="btn-report"><i class="icon-print"></i>Relatório</a></li>
                        <li><a href="@Url.Action("Vale", "Caixa", new { clear = true })"><i class="icon-download-alt"></i>Vale funcionário</a></li>
                    </ul>
                </div>
            </div>
        </div>
    }

    @if (_action.ToLower() == "search")
    {
        IEnumerable<teGridColumn<RP.Sistema.Model.Entities.ContaPagar>> _g = new[] 
        {
            new teGridColumn<RP.Sistema.Model.Entities.ContaPagar>
            {
                columnAttributes = new Dictionary<string, string>
                {
                    {"class", "actions b3"}
                }, 
                header = "", 
                format = item => 
                    
                    ((item.idCompra != null || item.idOrigem != null) ?
                    (
                    "<a class='btn'  rel='popover' data-placement='right' data-trigger='hover' data-content='Esta conta foi gerada de uma compra, somente no cancelamento da compra esta conta sera cancelada, ou é uma conta originada de outra.' title='Conta " + item.situacao + "' ><i class='icon-info-sign'></i></a>"
                    ) :
                    (Html.CustomActionLink( "Cancelar", "Cancelar", "ContaPagar", new { id = item.idContaPagar }, new { @class = "btn btn-danger", @title = "Cancelar registro" }, new { @left = "icon-off icon-white"}, true).ToString()
                    )) +  
                    
                    ((item.situacao == RP.Sistema.Model.Entities.ContaPagar.SITUACAO_PAGO) ?
                    (
                    "<a class='btn'  rel='popover' data-placement='right' data-trigger='hover' data-content='Esta conta já esta paga.' title='Conta " + item.situacao + "' ><i class='icon-info-sign'></i></a>"
                    ) :
                    (Html.CustomActionLink( "Pagar", "Pagar", "ContaPagar", new { id = item.idContaPagar }, new { @class = "btn btn-info", @title = "Pagar conta" }, new { @left = "icon-arrow-down icon-white"}, true).ToString()
                    )) +  
                    Html.CustomActionLink("Visualizar", "Details", "ContaPagar", new { id = item.idContaPagar }, new { @class = "btn btn-success", @title = "Detalhar registro" }, new { @left = "icon-eye-open icon-white"}, true).ToString()
            },
            new teGridColumn<RP.Sistema.Model.Entities.ContaPagar>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","15%"}
                },
                header = "Data", 
                format = item => (item.vencimento.Date < DateTime.Now.Date && item.situacao != "Pago") ? "<strong style='color:red'>" + item.vencimento.ToString("dd/MM/yyyy") +"</strong>" :item.vencimento.ToString("dd/MM/yyyy")
            },
            new teGridColumn<RP.Sistema.Model.Entities.ContaPagar>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","35%"}
                },
                header = "Fornecedor/Descrição", 
                format = item => item.Fornecedor.nome + "<br/>"+ ((item.vencimento.Date < DateTime.Now.Date && item.situacao != "Pago") ? "<strong style='color:red'>" + item.descricao +"</strong>" :item.descricao)
            },
            new teGridColumn<RP.Sistema.Model.Entities.ContaPagar>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","15%"}
                },
                header = "Forma de pagamento", 
                format = item => (item.vencimento.Date < DateTime.Now.Date && item.situacao != "Pago") ? "<strong style='color:red'>" + item.flFormaPagamento +"</strong>" :item.flFormaPagamento
            },
            new teGridColumn<RP.Sistema.Model.Entities.ContaPagar>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","15%"}
                },
                header = "Situação", 
                format = item => (item.vencimento.Date < DateTime.Now.Date && item.situacao != "Pago") ? "<strong style='color:red'>" + item.situacao +"</strong>" :item.situacao
            },
            new teGridColumn<RP.Sistema.Model.Entities.ContaPagar>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","10%"},
                },
                header = "Vl. da conta", 
                format = item => (item.vencimento.Date < DateTime.Now.Date && item.situacao != "Pago") ? "<strong style='color:red'>" + item.valorConta.ToString() +"</strong>" :item.valorConta.ToString()
            },
            new teGridColumn<RP.Sistema.Model.Entities.ContaPagar>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","10%"},
                },
                header = "Vl. pago", 
                format = item => item.valorPago
            }
		};

        var __grid = Html.tGrid<RP.Sistema.Model.Entities.ContaPagar>(
            Model,
            new Dictionary<string, string> { { "class", "table table-bordered table-condensed table-striped table-hover" } },
            _g,
            pager: new teGridPager
            {
                pagerAttributes = new Dictionary<string, string> { },
                currentPage = int.Parse(Request["page"] ?? RP.Util.Resource.Message.DEFAULT_PAGE),
                pageSize = int.Parse(Request["pagesize"] ?? RP.Util.Resource.Message.DEFAULT_PAGESIZE),
                totalItemCount = Model.TotalCount,
                routeValues = new RouteValueDictionary(new { controller = "ContaPagar", action = _action })
            }
        );
        @__grid
    }
</div>
@{
    string js = "~/" + Guid.NewGuid();

    ScriptBundle scriptBundle = new ScriptBundle(js);
    scriptBundle.Include("~/Scripts/ContaPagar/Index.js");
    BundleTable.Bundles.Add(scriptBundle);
}
@section scripts{
    @Scripts.Render(js)
}