<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#
	MvcTextTemplateHost mvcHost = MvcTemplateHost;
	var Model = (MvcTextTemplateHost)Host;
	var routePrefix = String.Empty;
	routePrefix += "/" + Model.ControllerRootName + "/";
#>
@model RP.DataAccess.PaginatedList<#= "<" + mvcHost.ViewDataTypeName + ">" #>
@using RP.Util.Class;
@using RP.Util.Class.Grid;
@using RP.Sistema.Web.Helpers;
@{
    ViewBag.Title = "<#= mvcHost.ViewName#>";
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
    Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
    var _action = ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString();
}
<div class="content_main ui-corner-all">
	@Html.FlashMessage()

	@using (Html.BeginForm("Search", "<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>", FormMethod.Get))
    {
        <fieldset class="ui-corner-all">
            <legend class="ui-state-active">Pesquisar</legend>
            <div class="block_content">
                @{
                    RP.Util.Class.Form editor = Html.Editor();
                    
                    editor.Add(new RP.Util.Class.Line()
                        .Add(
                            Html.Label("filter", "Filtro"),
                            Html.TextBox("filter", null, new { @class = "ui-corner-all textboxUI", @style = "width: 400px", maxlength = "100" })
                        )
                        .Add(
                            string.Empty,
                            @<button type="submit" button="{icons:{primary:'ui-icon-search'}}" class="buttonUI line" title="Localiza registros com base nos filtros inseridos">Localizar</button>
                        )
                        .Add(
                            string.Empty,
                            Html.ActionLink("Adicionar", "Create", null, new { @class = "buttonUI", @title = "Novo registro", @button = "{icons:{primary:'ui-icon-circle-plus'}}" })
                        )
                        .Add(
                            string.Empty,
                            Html.ActionLink("Relatório", "Create", null, new { @id="btn-report", @class = "buttonUI", @title = "Relatório", @button = "{icons:{primary:'ui-icon-document-b'}}" })
                        )
                    );
                }
                @editor.Render()
            </div>
        </fieldset>
    }

	@if (_action.ToLower() == "search")
    {
		IEnumerable<teGridColumn<RP.Sistema.Model.Entities.<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>>> _g = new[] 
        {
<#
List<ModelProperty> properties = GetModelProperties(mvcHost.ViewDataType);
foreach (ModelProperty property in properties) {
    if (!property.IsPrimaryKey && property.Scaffold) {
#>
            new teGridColumn<RP.Sistema.Model.Entities.<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","50%"}
                },
                columnAttributes = new Dictionary<string, string>
                {
                    {"class", "ui-widget-content"}
                },
                header = "<#= property.AssociationName #>", 
                format = item => item.<#= property.AssociationName #> 
            },
<#
    }
}
	string pkName = GetPrimaryKeyName(mvcHost.ViewDataType);
#>
			new teGridColumn<RP.Sistema.Model.Entities.<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>>
            {
                columnAttributes = new Dictionary<string, string>
                {
                    {"class", "ui-widget-content no-text"}
                }, 
                header = "", 
                format = item => (Html.ActionLink("Visualizar", "Details", "<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>", new { id = item.<#= pkName #> }, new {@class = "tgrid-detail", @title = "Detalhar registro" }))
            },
            new teGridColumn<RP.Sistema.Model.Entities.<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>>
            {
                columnAttributes = new Dictionary<string, string>
                {
                    {"class", "ui-widget-content no-text"}
                }, 
                header = "", 
                format = item => (Html.ActionLink("Editar", "Edit", "<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>", new { id = item.<#= pkName #> }, new {@class = "tgrid-edit", @title = "Editar registro" }))
            },
            new teGridColumn<RP.Sistema.Model.Entities.<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>>
            {
                columnAttributes = new Dictionary<string, string>
                {
                    {"class", "ui-widget-content no-text"}
                }, 
                header = "", 
                format = item => (Html.ActionLink( "Remover", "Delete", "<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>", new { id = item.<#= pkName #> }, new { @class = "tgrid-delete", @title = "Remover registro" }))
            }
		};
		
		var __grid = Html.tGrid<RP.Sistema.Model.Entities.<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>>(
             Model,
             new Dictionary<string, string> { { "id", "grid" } },
             _g,
             pager: new teGridPager
             {
                 pagerAttributes = new Dictionary<string, string> { },
                 currentPage = int.Parse(Request["page"] ?? RP.Util.Class.Message.DEFAULT_PAGE),
                 pageSize = int.Parse(Request["pagesize"] ?? RP.Util.Class.Message.DEFAULT_PAGESIZE),
                 totalItemCount = Model.TotalCount,
                 routeValues = new RouteValueDictionary(new { controller = "<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName)#>", action = _action })
             }
         );
        @__grid
	}
</div>
<#
string path = "C:\\Projetos\\RP\\RP.Sistema.Web\\Scripts\\" + getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName) + "\\";
string file = "Index.js";
string content;

if (!System.IO.Directory.Exists(path))
{
	System.IO.Directory.CreateDirectory(path);
}

if (!System.IO.File.Exists(path + file))
{
	System.IO.StreamWriter f = new System.IO.StreamWriter(path + file, false, System.Text.Encoding.UTF8);

	content = @"$(function () {
        $('#filter').focus(function () {
            $(this).select();
        }).focus();

        $('#grid').tGrid({ pager: 'bottom' });

		$('#btn-report').Report();
});";
	f.WriteLine(content);

	f.Flush();
	f.Close();
}
#>
@Html.AddScript("~/Scripts/<#= getControllerNameByViewDataTypeName(mvcHost.ViewDataTypeName) #>/Index.js")
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
    foreach (object attribute in property.GetCustomAttributes(true)) {
        var scaffoldColumn = attribute as ScaffoldColumnAttribute;
        if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
            return false;
        }
    }
    return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
    return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {
            string valueExpression = GetValueExpressionSuffix(prop);

            results.Add(new ModelProperty {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop)
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
    get {
        return (MvcTextTemplateHost)Host;
    }
}

string getControllerNameByViewDataTypeName(string model)
{
	string[] part = model.Split('.');
	return part[part.Length - 1];
}
#>