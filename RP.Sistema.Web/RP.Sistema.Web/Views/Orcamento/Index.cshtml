@model RP.DataAccess.PaginatedList<RP.Sistema.Model.Entities.Projeto>
@using RP.Util;
@using RP.Util.Class;
@using RP.Util.Class.Grid;
@using RP.Sistema.Web.Helpers;
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var _action = ViewContext.Controller.ValueProvider.GetValue("action").RawValue.ToString();
}
<div class="container-fluid">
    @Html.RenderFlashMessage()
    @using (Html.BeginForm("Search", "Orcamento", FormMethod.Get, new { @class = "well form-inline" }))
    {
        <div class="container center">
            <div class="input-prepend">
                <span class="add-on">Filtro</span>
                @Html.TextBox("filter", null, new { @class = "span6", maxlength = "100", @placeholder = "Pesquisar por descrição ou cliente..." })
            </div>
                @Html.CustomButton("Localizar", "submit", new { @class = "btn" }, new { @left = "icon-search" }, false)
        </div>
    }

    @if (_action.ToLower() == "search")
    {
        IEnumerable<teGridColumn<RP.Sistema.Model.Entities.Projeto>> _g = new[] 
        {
            new teGridColumn<RP.Sistema.Model.Entities.Projeto>
            {
                columnAttributes = new Dictionary<string, string>
                {
                    {"class", "actions b1"}
                }, 
                header = "", 
                format = item => 
                    Html.CustomActionLink("Selecionar projeto", "Projeto", "Orcamento", new { item.idProjeto }, new {@class = "btn", @title = "Selecionar projeto" }, new { @left = "icon-ok"}, true).ToString()
                    
                    
            },
            new teGridColumn<RP.Sistema.Model.Entities.Projeto>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","15%"}
                },
                header = "Dt. início", 
                format = item => item.dtInicio == null? "" : item.dtInicio.Value.ToString("dd/MM/yyyy HH:mm")
            },
            new teGridColumn<RP.Sistema.Model.Entities.Projeto>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","30%"}
                },
                header = "Cliente", 
                format = item => item.Cliente.nome
            },
            new teGridColumn<RP.Sistema.Model.Entities.Projeto>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","35%"}
                },
                header = "Descrição", 
                format = item => item.descricao
            },
            new teGridColumn<RP.Sistema.Model.Entities.Projeto>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","10%"}
                },
                header = "Sitação", 
                format = item => item.status 
            },
            new teGridColumn<RP.Sistema.Model.Entities.Projeto>
            { 
                headerAttributes = new Dictionary<string, string>
                {
                    {"width","10%"}
                },
                header = "Concluido", 
                format = item => item.flConcluido 
            }
		};

        var __grid = Html.tGrid<RP.Sistema.Model.Entities.Projeto>(
            Model,
            new Dictionary<string, string> { { "class", "table table-bordered table-condensed table-striped table-hover" } },
            _g,
            pager: new teGridPager
            {
                pagerAttributes = new Dictionary<string, string> { },
                currentPage = int.Parse(Request["page"] ?? RP.Util.Resource.Message.DEFAULT_PAGE),
                pageSize = int.Parse(Request["pagesize"] ?? RP.Util.Resource.Message.DEFAULT_PAGESIZE),
                totalItemCount = Model.TotalCount,
                routeValues = new RouteValueDictionary(new { controller = "Projeto", action = _action })
            }
        );
        @__grid
    }
</div>
@{
    string js = "~/" + Guid.NewGuid();

    ScriptBundle scriptBundle = new ScriptBundle(js);
    scriptBundle.Include("~/Scripts/Projeto/Index.js");
    BundleTable.Bundles.Add(scriptBundle);
}
@section scripts{
    @Scripts.Render(js)
}